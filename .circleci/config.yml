version: 2  # CircleCi version

jobs:       # Each job represents a phase in your Build-Test-Deploy process.

  build:    # Build job

    # This is the directory into which our code will be checked out, and this path will be used as the default
    # working directory for the rest of the job unless otherwise specified.
    working_directory: ~/code

    # we can specify container images under a docker key.
    docker:
      # List at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/openjdk:8-jdk
      - image: circleci/android:api-27-alpha

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    # several steps within the build job.
    steps:
      - checkout    #from git

      # pull down the cache, if present. If this is your first run, or if you’ve changed either of
      # your build.gradle files, this won’t do anything.
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "presentation/build.gradle" }}
          #      - run:
          #         name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
          #         command: sudo chmod +x ./gradlew

      - run:
          name: Download Dependencies
          # pull down the project’s dependencies. Normally you never call this task directly since it’s
          # done automatically when it’s needed, but calling it directly allows us to insert a save_cache step
          # that will store the dependencies in order to speed things up for next time.
          command: ./gradlew androidDependencies

      # store the dependencies in order to speed things up for next time.
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "presentation/build.gradle" }}

      - run:
          name: Compile
          #  runs the unit tests, and runs the built in linting tools to check your code for style issues.
          command: ./gradlew clean assemble
      - store_artifacts:
          path: presentation/build/outputs/apk/release
          destination: artifacts

      - run:
          name: Run Tests
          #  runs the unit tests, and runs the built in linting tools to check your code for style issues.
          command: ./gradlew lint test

      #  jacoco test coverage
      - run:
          name: Run Jacoco Test Coverage
          command: ./gradlew jacocoTestReport
      - store_artifacts:
                path: outputs/reports/jacoco-data
                destination: reports/data/jacoco
      - store_artifacts:
                path: outputs/reports/jacoco-domain
                destination: reports/domain/jacoco
      - store_artifacts:
                path: outputs/reports/jacoco-presentation
                destination: reports/presentation/jacoco

      # upload the build reports as build artifacts
      - store_artifacts:
          path: presentation/build/reports
          destination: reports/presentation
      # upload the test metadata (XML) for CircleCI to process.
      - store_test_results:
          path: presentation/build/test-results

      # for 'data' module
      - store_artifacts:
          path: data/build/reports
          destination: reports/data
      - store_test_results:
          path: data/build/test-results

      # for 'domain' module
      - store_artifacts:
          path: domain/build/reports
          destination: reports/domain
      - store_test_results:
          path: domain/build/test-results

      - run:
          name: Upload Jacoco Report To Codecov
          command: bash <(curl -s https://codecov.io/bash)
